Problem Solving Patterns 

Frequency Counter 
ðŸ”¹Determine the number of occurrences of each unique element in a dataset.
ðŸ”¹You would create a dictionary and then store the elements in that diciton that hold a value (number of times you see it in an array)
ðŸ”¹Used when dealing with 
    -Count the number of occurances 
    -When you want to avoid using nested for loops (increase time output)
    -Finding Duplicates 
    -Finding most/least frequent elements
ðŸ”¹ Example Problems:
    âœ…Two Sum (unsorted array)
    âœ…Anagram detection
    âœ…First non-repeating character
    âœ…Finding majority elements

Two Pointers 
ðŸ”¹An efficient way to solve problems that involve searching, sorting, or comparing elements in an array or string. 
ðŸ”¹It uses two separate pointers (indexes) that move towards each other or in the same direction to optimize space and time complexity.
ðŸ”¹Anytime you see SORTED or find a pair it is usually two pointers 
ðŸ”¹Used when dealing with 
    -Sorted arrays (e.g., searching for pairs).
    -Modifying arrays in-place without extra space.
    -Comparing elements from both ends.
ðŸ”¹Example Problems 
    âœ…Two sum (sorted array)
    âœ…Remove duplicates from a sorted array
    âœ…Valid palindrome
    âœ…Container with most water (max area)

Sliding Window 
ðŸ”¹Is an optimization method used for problems that involve contiguous subarrays or substrings. 
ðŸ”¹Instead of recalculating values from scratch (which can be slow), we use a moving window to process elements efficiently.
ðŸ”¹Types of Sliding Window
    -Fixed - Used when the window size is given explicitly.
    -Variable - Used when the window size changes dynamically based on a condition.
    -Dynamic - Used for problems related to strings and substrings.
ðŸ”¹Used when dealing with 
    -Contiguous sequences (arrays/strings).
    -Problems involving sums, averages, min/max values.
    -Finding the longest/shortest subarray with a condition.
ðŸ”¹Example Problems 
    âœ…Maximum sum of a subarray of size K
    âœ…Longest substring without repeating characters
    âœ…Smallest subarray with a sum â‰¥ target

LinkedLists
ðŸ”¹Not as common to show up but still good to know 
ðŸ”¹Used when dealing with
    -Pointer Manipulation
        -Moving nodes, reversing a list, merging lists.
    -Cycle Detection
        -Finding loops using the Fast & Slow Pointers technique.
    -Modifying a List In-Place
        -Removing a node, finding the middle node, deleting duplicates.
    -Recursive Solutions
        -Reversing a list, flattening linked lists, deep copying.
ðŸ”¹Example Problems 
    âœ…Reverse a LinkedList
    âœ…Detect a Cycle
    âœ…Find the middle of a LinkedList
    âœ…Merge two sorted LinkedList
    âœ…Remove Nth Node from End of List

